<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Yews Media</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom styles for the music player */
        #music-player-container {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background-color: #111827; /* Dark background */
            color: #f9fafb; /* Light text */
            padding: 16px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 16px;
            width: 300px; /* Increased width for better layout */
        }

        #music-player-phone {
            width: 50px; /* Increased size for better visibility */
            height: auto;
        }

        #music-player-controls {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        #music-player-play-button, #music-player-pause-button {
            background-color: #6b7280; /* Gray button */
            color: #f9fafb;
            border: none;
            padding: 8px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        #music-player-play-button:hover, #music-player-pause-button:hover {
            background-color: #9ca3af; /* Light gray hover */
        }

        #music-player-title {
            font-size: 14px;
            font-weight: 500;
            color: #f9fafb;
            white-space: nowrap;          /* Prevent text wrapping */
            overflow: hidden;             /* Hide overflowing text */
            text-overflow: ellipsis;    /* Add ellipsis (...) if text overflows */
            max-width: 200px;           /* Limit the width of the title */
        }

        #music-player-artist {
            font-size: 12px;
            color: #d1d5db;
            white-space: nowrap;          /* Prevent text wrapping */
            overflow: hidden;             /* Hide overflowing text */
            text-overflow: ellipsis;    /* Add ellipsis (...) if text overflows */
            max-width: 200px;           /* Limit the width of the artist name */
        }

        #music-player-track-list {
            position: absolute;
            top: -250px; /* Adjust as needed */
            left: 0;
            background-color: #374151; /* Darker background for track list */
            color: #f9fafb;
            padding: 12px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            z-index: 1001;
            max-height: 200px;
            overflow-y: auto;
            width: 280px; /* Match the width of the player */
        }

        #music-player-track-list ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #music-player-track-list li {
            padding: 8px;
            border-bottom: 1px solid #4b5563; /* Darker border */
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease;
            white-space: nowrap;          /* Prevent text wrapping */
            overflow: hidden;             /* Hide overflowing text */
            text-overflow: ellipsis;    /* Add ellipsis (...) if text overflows */
        }

        #music-player-track-list li:last-child {
            border-bottom: none;
        }

        #music-player-track-list li:hover {
            background-color: #6b7280; /* Lighter hover for track list items */
        }

        .hidden {
            display: none;
        }

        .shake {
            animation: shake 0.5s;
        }

        @keyframes shake {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }
    </style>
</head>
<body class="bg-gray-100">
    <header class="bg-red-600 text-white py-4">
        <div class="container mx-auto px-4">
            <h1 class="text-3xl font-bold text-center">Daily Yews Media</h1>
        </div>
    </header>

    <nav class="bg-gray-800 text-white py-3">
        <div class="container mx-auto px-4 flex justify-center space-x-6">
            <a href="#news" class="hover:text-gray-300 transition duration-300">News</a>
            <a href="#music" class="hover:text-gray-300 transition duration-300">Music</a>
            <a href="#support" class="hover:text-gray-300 transition duration-300">Support Us</a>
            <a href="#about" class="hover:text-gray-300 transition duration-300">About Us</a>
             <a href="#login" class="hover:text-gray-300 transition duration-300">Login/Sign Up</a>
        </div>
    </nav>

    <main class="container mx-auto px-4 py-8">
        <section id="news" class="mb-12">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Latest News</h2>
            <div id="article-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                </div>
        </section>

        <section id="music" class="mb-12">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Music</h2>
             <div id="music-player-container" class="hidden">
                <img id="music-player-phone" src="https://cdn-icons-png.flaticon.com/512/2544/2544955.png" alt="Phone">
                <div id="music-player-controls">
                    <button id="music-player-play-button">Play</button>
                    <button id="music-player-pause-button" class="hidden">Pause</button>
                    <div id="music-player-title"></div>
                    <div id="music-player-artist"></div>
                </div>
                <div id="music-player-track-list" class="hidden">
                    <ul>
                        </ul>
                </div>
            </div>
        </section>

        <section id="support" class="mb-12">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Support Us</h2>
            <p class="text-gray-700 text-center mb-4">Your support helps us keep the news coming. Donate via PayPal:</p>
            <div class="flex justify-center">
                <a href="https://paypal.me/bossbaby365" target="_blank" rel="noopener noreferrer" class="bg-yellow-500 hover:bg-yellow-700 text-gray-900 font-bold py-2 px-4 rounded-full transition duration-300">
                    Donate via PayPal
                </a>
            </div>
        </section>

        <section id="about" class="mb-12">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">About Us</h2>
            <p class="text-gray-700 text-center">Daily Yews Media is your source for the latest news and music.  We strive to bring you accurate and engaging content.</p>
            <div class="mt-4 flex justify-center space-x-4">
                <a href="https://www.youtube.com/@DAILYYEWS" target="_blank" rel="noopener noreferrer" class="text-blue-500 hover:text-blue-700 transition duration-300">YouTube</a>
                <a href="https://www.tiktok.com/@dailyyews" target="_blank" rel="noopener noreferrer" class="text-pink-500 hover:text-pink-700 transition duration-300">TikTok</a>
                <a href="https://x.com/DailyYews" target="_blank" rel="noopener noreferrer" class="text-gray-800 hover:text-gray-900 transition duration-300">Twitter</a>
            </div>
        </section>

        <section id="login" class="mb-12">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Login / Sign Up</h2>
            <div class="flex justify-center">
                <div class="bg-white rounded-lg shadow-md p-8 w-full max-w-md">
                    <div id="login-form" class="space-y-4">
                        <h3 class="text-lg font-semibold text-gray-800 text-center">Login</h3>
                        <div>
                            <label for="login-username" class="block text-gray-700 text-sm font-bold mb-2">Username:</label>
                            <input type="text" id="login-username" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your username">
                            <div id="login-username-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div>
                            <label for="login-password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="login-password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your password">
                             <div id="login-password-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <button id="login-button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full">Log In</button>
                        <button id="forgot-password-button" class="text-blue-500 hover:text-blue-700 text-sm font-bold mt-2 focus:outline-none focus:shadow-outline w-full text-center">Forgot Password?</button>
                    </div>
                    <div id="signup-form" class="space-y-4 hidden">
                        <h3 class="text-lg font-semibold text-gray-800 text-center">Sign Up</h3>
                        <div>
                            <label for="signup-username" class="block text-gray-700 text-sm font-bold mb-2">Username:</label>
                            <input type="text" id="signup-username" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your username">
                            <div id="signup-username-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div>
                            <label for="signup-password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="signup-password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your password">
                            <div id="signup-password-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div>
                            <label for="signup-email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                            <input type="email" id="signup-email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your email">
                            <div id="signup-email-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <button id="signup-button" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full">Sign Up</button>
                        <button id="switch-to-login" class="text-blue-500 hover:text-blue-700 text-sm font-bold mt-2 focus:outline-none focus:shadow-outline w-full text-center">Already have an account? Log In</button>
                    </div>
                     <div id="forgot-password-form" class="space-y-4 hidden">
                        <h3 class="text-lg font-semibold text-gray-800 text-center">Forgot Password</h3>
                        <div>
                            <label for="forgot-password-email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                            <input type="email" id="forgot-password-email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter your email">
                            <div id="forgot-password-email-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <button id="reset-password-button" class="bg-yellow-500 hover:bg-yellow-700 text-gray-900 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full">Reset Password</button>
                        <button id="back-to-login" class="text-blue-500 hover:text-blue-700 text-sm font-bold mt-2 focus:outline-none focus:shadow-outline w-full text-center">Back to Login</button>
                    </div>
                    <div id="admin-dashboard" class="space-y-4 hidden">
                        <h3 class="text-lg font-semibold text-gray-800 text-center">Admin Dashboard</h3>
                        <div>
                            <label for="article-title" class="block text-gray-700 text-sm font-bold mb-2">Article Title:</label>
                            <input type="text" id="article-title" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter article title">
                             <div id="article-title-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div>
                            <label for="article-content" class="block text-gray-700 text-sm font-bold mb-2">Article Content:</label>
                            <textarea id="article-content" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline h-32 resize-y" placeholder="Enter article content"></textarea>
                            <div id="article-content-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div>
                            <label for="article-cover" class="block text-gray-700 text-sm font-bold mb-2">Article Cover:</label>
                            <input type="file" id="article-cover" class="w-full">
                            <div id="article-cover-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                        </div>
                        <div class="flex items-center mb-4">
                            <input type="checkbox" id="article-paid" class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:ring-blue-600 dark:bg-gray-700 dark:border-gray-600">
                            <label for="article-paid" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                Paid Article (PayPal: paypal.me/bossbaby365)
                            </label>
                        </div>
                        <button id="upload-article-button" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full">Upload Article</button>

                        <div class="mt-8">
                            <h4 class="text-lg font-semibold text-gray-800 mb-4 text-center">Upload Music</h4>
                            <div>
                                <label for="song-title" class="block text-gray-700 text-sm font-bold mb-2">Song/Album Title:</label>
                                <input type="text" id="song-title" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter title">
                                 <div id="song-title-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                            </div>
                            <div>
                                <label for="artist-name" class="block text-gray-700 text-sm font-bold mb-2">Artist Name:</label>
                                <input type="text" id="artist-name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Enter artist name">
                                 <div id="artist-name-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                            </div>
                            <div>
                                <label for="song-cover" class="block text-gray-700 text-sm font-bold mb-2">Cover Art:</label>
                                <input type="file" id="song-cover" class="w-full">
                                <div id="song-cover-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                            </div>
                            <div>
                                <label for="audio-file" class="block text-gray-700 text-sm font-bold mb-2">Audio File:</label>
                                <input type="file" id="audio-file" class="w-full">
                                 <div id="audio-file-error" class="text-red-500 text-xs italic mt-1 hidden"></div>
                            </div>
                            <div class="flex items-center mb-4">
                                <input type="checkbox" id="upload-album" class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:ring-blue-600 dark:bg-gray-700 dark:border-gray-600">
                                <label for="upload-album" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                    Upload as Album
                                </label>
                            </div>
                            <div id="album-tracks-container" class="space-y-2 hidden">
                                 <label class="block text-gray-700 text-sm font-bold mb-2">Album Tracks:</label>
                                <div class="flex items-center gap-2">
                                    <input type="file" class="album-track-file w-full">
                                     <div class="track-file-error text-red-500 text-xs italic mt-1 hidden"></div>
                                    <button type="button" class="add-track-button bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-1 px-2 rounded focus:outline-none focus:shadow-outline">+</button>
                                </div>
                            </div>
                            <button id="upload-music-button" class="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full mt-4">Upload Music</button>
                        </div>
                         <button id="logout-button" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full mt-4">Logout</button>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer class="bg-gray-800 text-white py-4">
        <div class="container mx-auto px-4 text-center">
            &copy; 2024 Daily Yews Media. All rights reserved.
        </div>
    </footer>

    <script>
        const articleContainer = document.getElementById('article-container');
        const musicPlayerContainer = document.getElementById('music-player-container');
        const musicPlayerPlayButton = document.getElementById('music-player-play-button');
        const musicPlayerPauseButton = document.getElementById('music-player-pause-button');
        const musicPlayerTitle = document.getElementById('music-player-title');
        const musicPlayerArtist = document.getElementById('music-player-artist');
        const musicPlayerTrackList = document.getElementById('music-player-track-list');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        const forgotPasswordForm = document.getElementById('forgot-password-form');
        const loginButton = document.getElementById('login-button');
        const signupButton = document.getElementById('signup-button');
        const forgotPasswordButton = document.getElementById('forgot-password-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const switchToLoginButton = document.getElementById('switch-to-login');
        const switchToSignupButton = document.getElementById('switch-to-login'); // Corrected ID.
        const backToLoginButton = document.getElementById('back-to-login');
        const adminDashboard = document.getElementById('admin-dashboard');
        const logoutButton = document.getElementById('logout-button');
        const articleTitleInput = document.getElementById('article-title');
        const articleContentInput = document.getElementById('article-content');
        const articleCoverInput = document.getElementById('article-cover');
        const articlePaidCheckbox = document.getElementById('article-paid');
        const uploadArticleButton = document.getElementById('upload-article-button');
        const songTitleInput = document.getElementById('song-title');
        const artistNameInput = document.getElementById('artist-name');
        const songCoverInput = document.getElementById('song-cover');
        const audioFileInput = document.getElementById('audio-file');
        const uploadMusicButton = document.getElementById('upload-music-button');
        const uploadAlbumCheckbox = document.getElementById('upload-album');
        const albumTracksContainer = document.getElementById('album-tracks-container');
        const addTrackButton = document.querySelector('.add-track-button'); // Select the button
        const loginUsernameInput = document.getElementById('login-username');
        const loginPasswordInput = document.getElementById('login-password');
        const signupUsernameInput = document.getElementById('signup-username');
        const signupPasswordInput = document.getElementById('signup-password');
        const signupEmailInput = document.getElementById('signup-email');
        const forgotPasswordEmailInput = document.getElementById('forgot-password-email');

        let isPlaying = false;
        let currentAudio;
        let currentTrackIndex = 0;
        let tracks = [];
        let isAdmin = false;

        // --- Data Structures ---
        let users = JSON.parse(localStorage.getItem('users')) || [];
        let articles = JSON.parse(localStorage.getItem('articles')) || [];
        let musicData = JSON.parse(localStorage.getItem('music')) || { songs: [], albums: [] };

        // --- Helper Functions ---

        /**
         * Displays a message with a specified type (success, error)
         * @param {string} message - The message to display.
         * @param {string} type - The type of message ('success' or 'error').
         * @param {HTMLElement} inputElement - The associated input element (optional).
         */
        function showMessage(message, type = 'success', inputElement = null) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            messageElement.classList.add('fixed', 'top-4', 'right-4', 'rounded-md', 'p-4', 'z-50');
            messageElement.classList.add(type === 'success' ? 'bg-green-100', 'text-green-700' : 'bg-red-100', 'text-red-700');
            document.body.appendChild(messageElement);

            if (inputElement) {
                inputElement.classList.add(type === 'success' ? 'border-green-500' : 'border-red-500');
            }

            setTimeout(() => {
                messageElement.remove();
                if (inputElement) {
                    inputElement.classList.remove('border-green-500', 'border-red-500');
                }
            }, 3000);
        }

        /**
         * Validates an input field and shows an error message if invalid.
         * @param {string} value - The input value to validate.
         * @param {string} fieldName - The name of the field being validated.
         * @param {HTMLElement} errorElement - The HTML element to display the error message.
         * @returns {boolean} - True if the input is valid, false otherwise.
         */
        function validateInput(value, fieldName, errorElement) {
            let isValid = true;
            let errorMessage = '';

            switch (fieldName) {
                case 'username':
                    if (!value.trim()) {
                        isValid = false;
                        errorMessage = 'Username is required';
                    } else if (value.length < 3) {
                        isValid = false;
                        errorMessage = 'Username must be at least 3 characters';
                    }
                    break;
                case 'password':
                    if (!value.trim()) {
                        isValid = false;
                        errorMessage = 'Password is required';
                    } else if (value.length < 6) {
                        isValid = false;
                        errorMessage = 'Password must be at least 6 characters';
                    }
                    break;
                case 'email':
                    if (!value.trim()) {
                        isValid = false;
                        errorMessage = 'Email is required';
                    } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(value)) {
                        isValid = false;
                        errorMessage = 'Invalid email format';
                    }
                    break;
                case 'title':
                    if (!value.trim()) {
                        isValid = false;
                        errorMessage = 'Title is required';
                    }
                    break;
                case 'content':
                    if (!value.trim()) {
                        isValid = false;
                        errorMessage = 'Content is required';
                    }
                    break;
            }

            if (!isValid) {
                errorElement.textContent = errorMessage;
                errorElement.classList.remove('hidden');
            } else {
                errorElement.classList.add('hidden');
            }
            return isValid;
        }

        /**
         * Saves user data to localStorage.
         */
        function saveUsers() {
            localStorage.setItem('users', JSON.stringify(users));
        }

        /**
         * Saves article data to localStorage.
         */
        function saveArticles() {
            localStorage.setItem('articles', JSON.stringify(articles));
        }

        /**
         * Saves music data to localStorage.
         */
        function saveMusicData() {
            localStorage.setItem('music', JSON.stringify(musicData));
        }

        // --- Event Handlers ---

        /**
         * Handles user login.
         */
        function handleLogin() {
            const username = loginUsernameInput.value.trim();
            const password = loginPasswordInput.value.trim();
            const usernameError = document.getElementById('login-username-error');
            const passwordError = document.getElementById('login-password-error');

            let isUsernameValid = validateInput(username, 'username', usernameError);
            let isPasswordValid = validateInput(password, 'password', passwordError);

            if (isUsernameValid && isPasswordValid) {
                const user = users.find(u => u.username === username && u.password === password);
                if (user) {
                    showMessage('Login successful!', 'success');
                    if (user.username === 'Soren' && user.password === 'ilovegod') {
                        isAdmin = true;
                        adminDashboard.classList.remove('hidden');
                        loginForm.classList.add('hidden');
                         // Clear input fields
                        loginUsernameInput.value = '';
                        loginPasswordInput.value = '';
                    } else {
                        //For regular user.
                        loginForm.classList.add('hidden');
                        signupForm.classList.add('hidden');
                        forgotPasswordForm.classList.add('hidden');
                        // Clear input fields
                        loginUsernameInput.value = '';
                        loginPasswordInput.value = '';
                    }

                } else {
                    showMessage('Invalid credentials. Please try again.', 'error');
                    loginPasswordInput.value = '';
                }
            } else {
                //Shake the form.
                loginForm.classList.add('shake');
                setTimeout(()=> {
                    loginForm.classList.remove('shake');
                }, 500)
            }
        }

        /**
         * Handles user sign up.
         */
        function handleSignup() {
            const username = signupUsernameInput.value.trim();
            const password = signupPasswordInput.value.trim();
            const email = signupEmailInput.value.trim();
            const usernameError = document.getElementById('signup-username-error');
            const passwordError = document.getElementById('signup-password-error');
            const emailError = document.getElementById('signup-email-error');

            let isUsernameValid = validateInput(username, 'username', usernameError);
            let isPasswordValid = validateInput(password, 'password', passwordError);
            let isEmailValid = validateInput(email, 'email', emailError);

            if (isUsernameValid && isPasswordValid && isEmailValid) {
                if (users.find(u => u.username === username)) {
                    showMessage('Username already exists. Please choose a different one.', 'error');
                    return;
                }

                const newUser = { username, password, email };
                users.push(newUser);
                saveUsers();
                showMessage('Sign up successful! Please log in.', 'success');
                loginForm.classList.remove('hidden');
                signupForm.classList.add('hidden');

                // Clear input fields
                signupUsernameInput.value = '';
                signupPasswordInput.value = '';
                signupEmailInput.value = '';

            } else {
                //Shake the form.
                signupForm.classList.add('shake');
                setTimeout(()=> {
                    signupForm.classList.remove('shake');
                }, 500)
            }
        }

        /**
         * Handles forgot password functionality.
         */
        function handleForgotPassword() {
            const email = forgotPasswordEmailInput.value.trim();
            const emailError = document.getElementById('forgot-password-email-error');
             let isEmailValid = validateInput(email, 'email', emailError);

            if (isEmailValid) {
                const user = users.find(u => u.email === email);
                if (user) {
                    showMessage(`Password reset email sent to ${email}. Please check your inbox.`, 'success');
                    loginForm.classList.remove('hidden');
                    forgotPasswordForm.classList.add('hidden');
                     // Clear input field
                     forgotPasswordEmailInput.value = '';
                } else {
                    showMessage('Email not found. Please enter the email associated with your account.', 'error');
                }
            } else {
                 //Shake the form.
                 forgotPasswordForm.classList.add('shake');
                setTimeout(()=> {
                    forgotPasswordForm.classList.remove('shake');
                }, 500)
            }
        }

        /**
         * Handles article upload functionality.
         */
        function handleUploadArticle() {
            const title = articleTitleInput.value.trim();
            const content = articleContentInput.value.trim();
            const cover = articleCoverInput.files[0];
            const isPaid = articlePaidCheckbox.checked;
            const titleError = document.getElementById('article-title-error');
            const contentError = document.getElementById('article-content-error');
            const coverError = document.getElementById('article-cover-error');

            let isTitleValid = validateInput(title, 'title', titleError);
            let isContentValid = validateInput(content, 'content', contentError);
            let isCoverValid = cover !== undefined; // Basic check, more validation needed

            if (!isCoverValid) {
                coverError.textContent = 'Cover image is required';
                coverError.classList.remove('hidden');
            }  else {
                coverError.classList.add('hidden');
            }

            if (isTitleValid && isContentValid && isCoverValid) {
                // In a real app, you'd upload the cover image to a server
                // and get back a URL.  For this example, we'll just use a
                // placeholder URL.
                const coverUrl = 'https://via.placeholder.com/150';

                const newArticle = {
                    title,
                    content,
                    coverUrl,
                    isPaid,
                    createdAt: new Date()
                };

                articles.push(newArticle);
                saveArticles();
                renderArticles(); // Re-render to display the new article
                showMessage('Article uploaded successfully!', 'success');

                // Clear the form
                articleTitleInput.value = '';
                articleContentInput.value = '';
                articleCoverInput.value = '';
                articlePaidCheckbox.checked = false;

            } else {
                 //Shake the form.
                 adminDashboard.classList.add('shake');
                setTimeout(()=> {
                    adminDashboard.classList.remove('shake');
                }, 500)
            }
        }

        /**
         * Handles music upload functionality.
         */
        function handleUploadMusic() {
            const title = songTitleInput.value.trim();
            const artist = artistNameInput.value.trim();
            const cover = songCoverInput.files[0];
            const audio = audioFileInput.files[0];
            const isAlbum = uploadAlbumCheckbox.checked;
             const titleError = document.getElementById('song-title-error');
            const artistError = document.getElementById('artist-name-error');
            const coverError = document.getElementById('song-cover-error');
            const audioError = document.getElementById('audio-file-error');

            let isTitleValid = validateInput(title, 'title', titleError);
            let isArtistValid = validateInput(artist, 'artist', artistError);
            let isCoverValid = cover !== undefined;
            let isAudioValid = audio !== undefined;

             if (!isCoverValid) {
                coverError.textContent = 'Cover art is required';
                coverError.classList.remove('hidden');
            }  else {
                coverError.classList.add('hidden');
            }

            if (!isAudioValid) {
                audioError.textContent = 'Audio file is required';
                audioError.classList.remove('hidden');
            } else {
                audioError.classList.add('hidden');
            }

            if (isTitleValid && isArtistValid && isCoverValid && isAudioValid) {
                // In a real app, you'd upload files to a server and get URLs.
                const coverUrl = 'https://via.placeholder.com/150';
                const audioUrl = 'https://example.com/audio.mp3';

                if (isAlbum) {
                    const albumTracks = [];
                    const trackFiles = document.querySelectorAll('.album-track-file');
                    const trackErrors = document.querySelectorAll('.track-file-error');
                    let allTracksValid = true;

                    trackFiles.forEach((trackFile, index) => {
                        if (!trackFile.files[0]) {
                            allTracksValid = false;
                            trackErrors[index].textContent = 'Track file is required';
                            trackErrors[index].classList.remove('hidden');
                        } else {
                            trackErrors[index].classList.add('hidden');
                            //  In real app: Upload file, get URL.
                            albumTracks.push({
                                title: `Track ${index + 1}`, // Or get title from input if you add that
                                url: 'https://example.com/track.mp3'
                            });
                        }
                    });

                    if (allTracksValid) {
                         musicData.albums.push({
                            title,
                            artist,
                            coverUrl,
                            tracks: albumTracks,
                        });
                        showMessage('Album uploaded successfully!', 'success');
                    } else {
                         showMessage('Please ensure all track files are selected.', 'error');
                         return;
                    }

                } else {
                    musicData.songs.push({ title, artist, coverUrl, url: audioUrl });
                    showMessage('Song uploaded successfully!', 'success');
                }
                saveMusicData();
                renderMusicList();

                // Clear form
                songTitleInput.value = '';
                artistNameInput.value = '';
                songCoverInput.value = '';
                audioFileInput.value = '';
                uploadAlbumCheckbox.checked = false;
                albumTracksContainer.classList.add('hidden');
                albumTracksContainer.innerHTML = ''; // Clear added track inputs

            } else {
                 //Shake the form.
                 adminDashboard.classList.add('shake');
                setTimeout(()=> {
                    adminDashboard.classList.remove('shake');
                }, 500)
            }
        }

        /**
         * Handles playing a selected track.
         * @param {string} trackUrl - The URL of the track to play.
         * @param {string} title - The title of the track.
         * @param {string} artist - The artist of the track.
         */
        function playTrack(trackUrl, title, artist) {
            if (currentAudio) {
                currentAudio.pause();
            }
            currentAudio = new Audio(trackUrl);
            currentAudio.play();
            isPlaying = true;
            musicPlayerPlayButton.classList.add('hidden');
            musicPlayerPauseButton.classList.remove('hidden');
            musicPlayerTitle.textContent = title;
            musicPlayerArtist.textContent = artist;
        }

        /**
        * Renders the list of songs and albums.
        */
        function renderMusicList() {
            musicPlayerTrackList.innerHTML = '<ul></ul>';
            const trackListElement = musicPlayerTrackList.querySelector('ul');

            musicData.songs.forEach((song, index) => {
                const listItem = document.createElement('li');
                listItem.textContent = `${song.title} - ${song.artist}`;
                listItem.dataset.url = song.url;
                listItem.dataset.title = song.title;
                listItem.dataset.artist = song.artist;
                listItem.addEventListener('click', () => {
                    playTrack(song.url, song.title, song.artist);
                    currentTrackIndex = index;
                });
                trackListElement.appendChild(listItem);
            });

            musicData.albums.forEach((album, albumIndex) => {
                const listItem = document.createElement('li');
                listItem.textContent = `${album.title} - ${album.artist} (Album)`;
                listItem.dataset.albumIndex = albumIndex;
                listItem.addEventListener('click', () => {
                    // Play the first track of the album, for simplicity
                    if (album.tracks && album.tracks.length > 0) {
                        playTrack(album.tracks[0].url, album.tracks[0].title, album.artist);
                        currentTrackIndex = 0;
                        tracks = album.tracks;
                    }
                });
                trackListElement.appendChild(listItem);
            });
        }

        /**
         * Renders the list of articles.
         */
        function renderArticles() {
            articleContainer.innerHTML = ''; // Clear existing articles
            articles.slice().reverse().forEach(article => { // Reverse for newest first
                const articleDiv = document.createElement('div');
                articleDiv.classList.add('bg-white', 'rounded-lg', 'shadow-md', 'p-4', 'flex', 'flex-col', 'transition-transform', 'hover:scale-105');

                const titleElement = document.createElement('h3');
                titleElement.classList.add('text-xl', 'font-semibold', 'text-gray-800', 'mb-2');
                titleElement.textContent = article.title;

                const coverElement = document.createElement('img');
                coverElement.classList.add('w-full', 'h-48', 'object-cover', 'rounded-md', 'mb-4');
                coverElement.src = article.coverUrl;
                coverElement.alt = article.title;

                const contentElement = document.createElement('p');
                contentElement.classList.add('text-gray-700', 'mb-4', 'flex-grow');
                contentElement.textContent = article.content;

                const paidElement = document.createElement('p');
                paidElement.classList.add('text-sm', 'font-semibold', article.isPaid ? 'text-red-500' : 'text-green-500');
                paidElement.textContent = article.isPaid ? 'Paid Article' : 'Free Article';

                articleDiv.appendChild(titleElement);
                articleDiv.appendChild(coverElement);
                articleDiv.appendChild(contentElement);
                articleDiv.appendChild(paidElement);
                articleContainer.appendChild(articleDiv);
            });
        }

        // --- Event Listeners ---

        loginButton.addEventListener('click', handleLogin);
        signupButton.addEventListener('click', handleSignup);
        forgotPasswordButton.addEventListener('click', handleForgotPassword);
        resetPasswordButton.addEventListener('click', () => {
            showMessage('Password reset functionality not implemented in this example.', 'info');
        });
        switchToLoginButton.addEventListener('click', () => {
            loginForm.classList.remove('hidden');
            signupForm.classList.add('hidden');
            forgotPasswordForm.classList.add('hidden');
        });

        switchToSignupButton.addEventListener('click', () => {
            signupForm.classList.remove('hidden');
            loginForm.classList.add('hidden');
            forgotPasswordForm.classList.add('hidden');
        });

        backToLoginButton.addEventListener('click', () => {
            loginForm.classList.remove('hidden');
            forgotPasswordForm.classList.add('hidden');
        });

        logoutButton.addEventListener('click', () => {
            isAdmin = false;
            adminDashboard.classList.add('hidden');
            loginForm.classList.remove('hidden');
            showMessage('Logged out.', 'success');
        });

        uploadArticleButton.addEventListener('click', handleUploadArticle);
        uploadMusicButton.addEventListener('click', handleUploadMusic);

        musicPlayerPlayButton.addEventListener('click', () => {
            if (currentAudio) {
                currentAudio.play();
                isPlaying = true;
                musicPlayerPlayButton.classList.add('hidden');
                musicPlayerPauseButton.classList.remove('hidden');
            } else if (musicData.songs.length > 0) {
                // If no audio is playing, play the first song
                playTrack(musicData.songs[0].url, musicData.songs[0].title, musicData.songs[0].artist);
                currentTrackIndex = 0;
            } else if (musicData.albums.length > 0 && musicData.albums[0].tracks.length>0) {
                 playTrack(musicData.albums[0].tracks[0].url,  musicData.albums[0].tracks[0].title,  musicData.albums[0].artist);
                 currentTrackIndex = 0;
            }
        });

        musicPlayerPauseButton.addEventListener('click', () => {
            if (currentAudio) {
                currentAudio.pause();
                isPlaying = false;
                musicPlayerPlayButton.classList.remove('hidden');
                musicPlayerPauseButton.classList.add('hidden');
            }
        });

        // Event listener for "Upload as Album" checkbox
        uploadAlbumCheckbox.addEventListener('change', function() {
            if (this.checked) {
                albumTracksContainer.classList.remove('hidden');
            } else {
                albumTracksContainer.classList.add('hidden');
                albumTracksContainer.innerHTML = ''; // Clear added track inputs
            }
        });

        // Event listener for "Add Track" button
        addTrackButton.addEventListener('click', function() {
            const newTrackInput = document.createElement('div');
            newTrackInput.classList.add('flex', 'items-center', 'gap-2');
            newTrackInput.innerHTML = `
                <input type="file" class="album-track-file w-full">
                <div class="track-file-error text-red-500 text-xs italic mt-1 hidden"></div>
                <button type="button" class="remove-track-button bg-red-200 hover:bg-red-300 text-red-800 font-bold py-1 px-2 rounded focus:outline-none focus:shadow-outline">-</button>
            `;
            albumTracksContainer.appendChild(newTrackInput);

            const removeButton = newTrackInput.querySelector('.remove-track-button');
            removeButton.addEventListener('click', function() {
                newTrackInput.remove();
            });
        });

        // --- Initializations ---

        renderArticles();
        renderMusicList();

        // --- For testing purposes, create a default admin user if none exists ---
        if (!users.find(u => u.username === 'Soren')) {
            users.push({ username: 'Soren', password: 'ilovegod', email: 'soren@example.com' });
            saveUsers();
        }
    </script>
</body>
</html>
